#!/bin/bash
#set -x
#This function build .dot file for graphviz
rm -fr run.dot run.png
#---------------------------------------------------------------------------------------------------------------
compare() {
string=$1 ; substring=$2

    if test "${string#*$substring}" != "$string"
    then
        return 0    # $substring is in $string
    else
        return 1    # $substring is not in $string
    fi
return 0
}   #end compare()
#--------------------------------------------
#--------------------------------------------
is_container_running() {
fullhostname=$1

#-----check container status by host--------
# return> hostname/running/0    empty/not running/1
is_running=`docker ps --format '{{.Names}}' --filter status=running --filter name=$1 `
#echo ">$i:$is_dead<"
if [ -z "$is_running" ]; then   #check if not empty
	return 1    #empty(container not runing)
else
	return 0    #not empty (container running)
fi
return
}   #end is_container_running()
#---------------------------------------------------------------------------------
#---------------------------------------------------------------------------------
function convert_to_linked_hosts() {
# This function fixes the grouping/orientation for graphviz
#input: hostnames string ex [HOST01 HOST02 HOST03 HOST04 HOST 05]
#output: modified strinh with "->" and line breaks by n postion
#ex		SH01-> SH02-> SH03-> SH04 [style="invis"];
#		SH05-> SH06-> SH07 [style="invis"];
#		SH08-> SH09-> SH10 [style="invis"];

#$1: list of hosts to process. DONOT use $host as its global
n=`echo "$1" | awk '{print NF}' `   #hosts count

#printf "DEBUG:($n)convert_to_linked_hosts():IN> hosts:[$1]\n"
list=""
for i in `echo $1`;do
    if [ -z "$list" ];then
        list=$i
    else
        #list=$i"-> $list"  #space is critical
        list="$list-> $i"  #space is critical
    fi
done
#----Break every 5 hosts -----
#NR:Number of fields in record FS:Field Separator RS:Record Separator
#gsub(regexp, replacement [, target])      { gsub(/Britain/, "United Kingdom"); print }
#split string every n word; then append some text
if [ "$n" -gt "5" ]; then
    str=`echo $list | awk '{for(i='5'; i<NF;i+='5'){$i=$i RS}; gsub(RS FS,RS,$0) }1' `
    dot_linkedhosts=`printf "$str"| sed -e ':a' -e 'N' -e '$!ba' -e 's/->\n/ [style=\"invis\"];\\\n /g'`
    dot_linkedhosts=`printf "$dot_linkedhosts [style=\"invis\"];"`
else
    dot_linkedhosts=`printf "$list [style=\"invis\"];"`
fi
#----Break every 5 items -----

#printf "DEBUG:($n)dot_linkedhosts():OUT> dot_linkedhosts:[$dot_linkedhosts]\n"

return    #return global $dot_linkedhosts
}	#end convert_to_linked_hosts()
#---------------------------------------------------------------------------------


#---------------------------------------------------------------------------------
function build_global_section() {
#---Build global stuff -------
n=$1
echo "
//---------------------------------
//generated by build_global_section()
digraph test {
splines=false
rankdir=LR
label=\"Splunk Containers ($n)\";
node [	nodesep=1.0,
		outputMode=nodesfirst,
		style=rounded,
		penwidth=1.0,
		fontcolor=blue,
		fontsize=10
		shape=box,
		bgcolor=\"#ffffff00\",
		overlap=scale];
   	 	forcelabels=true;
		labelfontcolor=\"Red\"
    	labelfontname=\"Arial\"
    	labelfontsize=\"10\"
    	labelloc=t
    	labeljust=c
    	color=gray;style=filled
    	overlap=prism; overlap_scaling=0.01; ratio=0.7;
edge [penwidth=0.75,arrowsize=0.6]
edge [color=black, fontsize=8, forcelabels=true]
//-------------------------------------" > run.dot
printf "\n" >> run.dot

return
}	#end build_global_section()
#---------------------------------------------------------------------------------
#---------------------------------------------------------------------------------
function build_generic_section() {
members=""
for i in `echo $1`;do      #loop thru all hosts
	#echo "build_generic_section(): Checking host[$i]...."
	single=`echo $i|grep -v "SH"|grep -v "IDX"`
	members=$members" $single"
done
#printf "hosts[$1]\n"
#printf  "members[$members] \n"
c=`echo "$members" | awk '{print NF}' `   #current number of hosts

echo "//------------------------------------------
//generated by build_generic_section()
subgraph cluster_0 {
label=\"Generic($c)\";
	labelloc=t;
	labeljust=r;
	color=gray;
	style=filled;
    labelfontcolor=\"turquoise\";" >> run.dot
convert_to_linked_hosts "$members"		#returns $dot_linkedhosts
#printf "DEBUG:dot_linkedhosts:$dot_linkedhosts\n"
printf "\t$dot_linkedhosts\n" >> run.dot
printf "}\n" >> run.dot
printf "//-----------------------------------\n">> run.dot

return
}	#end build_generic_section()
#---------------------------------------------------------------------------------
#---------------------------------------------------------------------------------
function build_shc_section() {
#This function build the sch cluster section in dot file.

#dicover shc members and captian--looking for at least 1 SH (container:running splunkd:running)
shc_members="";splunkstatus="";shc_list="";captain=""
for i in `echo $1`;do      #loop thru all hosts
#	printf "build_shc_section(): Checking host[$i]....%s\n" $(is_container_running "$i")
if  ( is_container_running "$i" ) && ( compare "$i" "SH" ); then
		splunkstatus=`docker exec -ti $i /opt/splunk/bin/splunk status|ggrep -i "not running"`
		if [ -z "$splunkstatus" ]; then
#		echo "DEBUG: Evaluating host:$i"
   		shc_list=`docker exec -u splunk -ti $i /opt/splunk/bin/splunk show shcluster-status -auth admin:hello| grep -i label|awk '{print $3}'| sort | uniq -c `
		captain=`echo "$shc_list" | grep -v " 1 "| awk '{print $2}'| sed -e 's/^M//g' | tr -d '\r' | tr -d '\n' `
		shc_members=`echo "$shc_list" | awk '{print $2}' |sed -e 's/^M//g' | tr -d '\r' | tr '\n' ' '`
		fi
	fi

	if ( compare "$i" "DEP" ); then
		dep="$i"
	fi
done

#printf  "shc_members[$shc_members]   captain[$captain]\n"
c=`echo "$shc_members" | awk '{print NF}' `   #current number of hosts

if [ "$c" -gt "0" ]; then
echo "//---------------------------------
//generated by build_shc_section()
subgraph cluster_1 {
label=\"shcluster01($c)\";
	labelloc=t;
	labeljust=r;
	color=gray;
	style=filled;
    labelfontcolor=\"turquoise\";" >> run.dot
shc_nodes="$shc_members $dep"
convert_to_linked_hosts "$shc_nodes"		#returns $dot_linkedhosts
printf "\t$dot_linkedhosts\n" >> run.dot

#change color based on status
for i in `echo $shc_nodes`; do
	host_ip=`docker inspect --format '{{ .HostConfig }}' $i| ggrep -o '[0-9]\+[.][0-9]\+[.][0-9]\+[.][0-9]\+'| head -1`
	if [ "$i" == "$captain" ]; then
		role="captain"
	else
		role=""
	fi

	if ! ( is_container_running "$i" ); then		#return=1 if dead
		style="rounded,dashed"
		color="red"
		label="$i\n$host_ip\n$role"
	elif ( splunkstatus=`docker exec -ti $i /opt/splunk/bin/splunk status|ggrep -i "not running"` ); then
		style="rounded"
    	color="yellow"
		label="$i\n$host_ip\n$role"
	else
		style="rounded,filled"
    	color="green"
		label="$i\n$host_ip\n$role"
		#HOST01[color="red"; label=<HOST01<BR/><FONT POINT-SIZE="7">http://10.0.0.101:8000</FONT>>];
	fi
    line="$i [color=\"$color\", style=\"$style\", label=\"$label\"];"
	printf "\t$line\n" >> run.dot
done

#printf "\t$captain [label=\"CAPTAIN\"];\n" >> run.dot
printf "}\n" >> run.dot
printf "//-------------------------\n">> run.dot

#printf "DEBUG:($n)build_shc_section():OUT> dot_linkedhosts:[$dot_linkedhosts]\n"
fi
return
}	#end build_shc_section()
#---------------------------------------------------------------------------------
#---------------------------------------------------------------------------------
function build_idxc_section() {
#This function build the idxc cluster section in dot file.

#dicover idxc members and cm--
idxc_members="";cm="";idx_list="";idxc_memeber=""
for i in `echo $1`;do      #loop thru all hosts
	#echo "build_shc_section(): Checking host[$i]...."
	if ( is_container_running "$i" ) && ( compare "$i" "CM" ); then
		cm="$i"
		splunkstatus=`docker exec -ti $i /opt/splunk/bin/splunk status|ggrep -i "not running"`
        if [ -z "$splunkstatus" ]; then
 #       echo "DEBUG: Evaluating host:$i"
   		idxc_list=`docker exec -u splunk -ti $cm /opt/splunk/bin/splunk show cluster-status -auth admin:hello| grep IDX|awk '{print $1}'| sort | uniq -c `
#		echo "idxc_list [$idxc_list]"
		idxc_members=`echo "$idxc_list" | awk '{print $2}' |sed -e 's/^M//g' | tr -d '\r' | tr  '\n' ' ' `
	fi
fi
done

#printf  "idx_members[$idxc_members]   cm[$cm]\n"
c=`echo "$idxc_members" | awk '{print NF}' `   #current number of hosts
if [ "$c" -gt "0" ]; then

echo "//---------------------------------
//generated by build_idxc_section()
subgraph cluster_2 {
label=\"idxcluster01($c)\";
	labelloc=b;
	labeljust=r;
	color=gray;
	style=filled;
    labelfontcolor=\"turquoise\";" >> run.dot
idxc_nodes="$idxc_members $cm"
convert_to_linked_hosts "$idxc_nodes"		#returns $dot_linkedhosts
#printf "dot_linkedhosts:[$dot_linkedhosts]"
printf "\t$dot_linkedhosts\n" >> run.dot


#--------change color based on status---------
for i in `echo $idxc_nodes`; do
    host_ip=`docker inspect --format '{{ .HostConfig }}' $i| ggrep -o '[0-9]\+[.][0-9]\+[.][0-9]\+[.][0-9]\+'| head -1`
    if [ "$i" == "$cm" ]; then
        role="Cluster Master"
    else
        role=""
    fi
#echo "i[$i] role[$role] members[$shc_members]"

    if ! ( is_container_running "$i" ); then      #return=1 if running
        style="rounded,dashed"
		color="red"
		label="$i\n$host_ip\n$role"
    elif ( splunkstatus=`docker exec -ti $i /opt/splunk/bin/splunk status|ggrep -i "not running"` ); then
        style="rounded"
		color="yellow"
		label="$i\n$host_ip\n$role"
    else
        style="rounded,filled"
		color="green"
		label="$i\n$host_ip\n$role"
        #HOST01[color="red"; label=<HOST01<BR/><FONT POINT-SIZE="7">http://10.0.0.101:8000</FONT>>];
    fi
    line="$i [color=\"$color\", style=\"$style\", label=\"$label\"];"
    printf "\t$line\n" >> run.dot
done
#--------change color based on status---------


printf "}\n" >> run.dot
printf "//-------------------------\n">> run.dot
fi
#printf "DEBUG:($n)build_idxc_section():OUT> dot_linkedhosts:[$dot_linkedhosts]\n"

return
}	#end build_idxc_section()
#---------------------------------------------------------------------------------
#---------------------------------------------------------------------------------
function build_cluster_connections() {

printf "\n" >> run.dot
printf "//generated by build_cluster_connections()\n" >> run.dot
printf "{rank=same SH01 IDX01}\n{rank=same SH02 IDX02}\n{rank=same SH03 IDX03}\n" >> run.dot
printf "SH01 -> IDX01 [color=red;penwidth=1.0];\n" >> run.dot
printf "SH02 -> IDX01 [color=red;penwidth=1.0];\n" >> run.dot
printf "SH03 -> IDX01 [color=red;penwidth=1.0];\n" >> run.dot

printf "SH01 -> IDX02 [color=red;penwidth=1.0;style=dashed];\n" >> run.dot
printf "SH02 -> IDX02 [color=red;penwidth=1.0];\n" >> run.dot
printf "SH03 -> IDX02 [color=red;penwidth=1.0];\n" >> run.dot

printf "SH01 -> IDX03 [color=red;penwidth=1.0];\n" >> run.dot
printf "SH02 -> IDX03 [color=red;penwidth=1.0];\n" >> run.dot
printf "SH03 -> IDX03 [color=red;penwidth=1.0];\n" >> run.dot
printf "//-------------------------\n\n">> run.dot

return
}	#build_cluster_connections()
#---------------------------------------------------------------------------------


#### MAIN #####

hosts=`docker ps -a --format "{{.Names}}"|sort -r| tr '\n' ' '|sed 's/: /:/g'`
n=`echo "$hosts" | awk '{print NF}' `   #current number of hosts
if [ "$n" -eq "0" ]; then
	printf "($n) No hosts lists, exiting...\n"
	exit
fi
build_global_section "$n"

build_idxc_section "$hosts"
build_shc_section "$hosts"
build_cluster_connections
build_generic_section "$hosts"


#--- close every thing-------
printf "\n}\n\n" >> run.dot
#------------------------------
dot -Gnewrank -Tpng  run.dot -o run.png
#open run.png
#sleep 1
imgcat run.png

exit 0

