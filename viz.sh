#!/bin/bash
#set -x
#This function build .dot file for graphviz
rm -fr run.dot run.png
#---------------------------------------------------------------------------------
pausing() {
#$1=seconds

for c in $(seq 1 $1); do
    echo -ne "Refreshing in $1 seconds... $c\r"
    sleep 1
done
printf "Refreshing $1 seconds...........Done!\n"

return 0
}   #end pausing()
#---------------------------------------------------------------------------------

#---------------------------------------------------------------------------------
compare() {
string=$1 ; substring=$2

if test "${string#*$substring}" != "$string"
then
      return 0    # $substring is in $string
else
      return 1    # $substring is not in $string
fi
return 0
}   #end compare()
#--------------------------------------------
#--------------------------------------------
is_splunkd_running() {
fullhostname=$1
#if-then-else has reverse boolean representaiton
is_running=`docker exec -ti $1 sh -c "ps xa|grep '[s]plunkd -p'" `
if [ -z "$is_running" ]; then   #check if not empty
	return 1    #empty. splunkd not running
else
	return 0    #not empty (splunkd running)
fi
return
}   #end is_splunkd_running()
#---------------------------------------------------------------------------------

#--------------------------------------------
is_container_running() {
fullhostname=$1
is_running=`docker ps --format '{{.Names}}' --filter status=running --filter name=$1 `
if [ -z "$is_running" ]; then   #check if not empty
#	echo "$1: not running [ret:0]"
	return 1    #empty(container not runing)
else
#	echo "$1: running [ret:1]"
	return 0    #not empty (container running)
fi
#return
}   #end is_container_running()
#---------------------------------------------------------------------------------
#---------------------------------------------------------------------------------
function convert_to_linked_hosts() {
# This function fixes the grouping/orientation for graphviz
#input: hostnames string ex [HOST01 HOST02 HOST03 HOST04 HOST 05]
#output: modified strinh with "->" and line breaks by n postion
#ex		SH01-> SH02-> SH03-> SH04 [style="invis"];
#		SH05-> SH06-> SH07 [style="invis"];
#		SH08-> SH09-> SH10 [style="invis"];

#$1: list of hosts to process. DONOT use $host as its global
n=`echo "$1" | awk '{print NF}' `   #hosts count

#printf "DEBUG:($n)convert_to_linked_hosts():IN> hosts:[$1]\n"
list=""
for i in `echo $1`;do
    if [ -z "$list" ];then
        list=$i
    else
        #list=$i"-> $list"  #space is critical
        list="$list-> $i"  #space is critical
    fi
done
#----Break every 5 hosts -----
#NR:Number of fields in record FS:Field Separator RS:Record Separator
#gsub(regexp, replacement [, target])      { gsub(/Britain/, "United Kingdom"); print }
#split string every n word; then append some text
if [ "$n" -gt "5" ]; then
    str=`echo $list | awk '{for(i='5'; i<NF;i+='5'){$i=$i RS}; gsub(RS FS,RS,$0) }1' `
    dot_linkedhosts=`printf "$str"| sed -e ':a' -e 'N' -e '$!ba' -e 's/->\n/ [style=\"invis\"];\\\n /g'`
    dot_linkedhosts=`printf "$dot_linkedhosts [style=\"invis\"];"`
else
    dot_linkedhosts=`printf "$list [style=\"invis\"];"`
fi
#----Break every 5 items -----

#printf "DEBUG:($n)dot_linkedhosts():OUT> dot_linkedhosts:[$dot_linkedhosts]\n"

return    #return global $dot_linkedhosts
}	#end convert_to_linked_hosts()
#---------------------------------------------------------------------------------
#---------------------------------------------------------------------------------
function build_digraph_section() {
#---Build global stuff -------
n=$1
echo "
//---------------------------------
//generated by build_digraph_section()
digraph test {
splines=false
rankdir=LR
outputorder=nodesfirst
label=\"Splunk n' box Containers [$n]\";
node [	nodesep=1.0,
		#outputMode=nodesfirst,
		outputorder=nodesfirst
		outputMode=nodesfirst,
		packMode=clust,
		style=rounded,
		penwidth=1.0,
		fontcolor=blue,
		fontsize=10
		shape=box,
		bgcolor=\"#ffffff00\",
		overlap=scale];
   	 	forcelabels=true;
		labelfontcolor=\"Red\"
    	labelfontname=\"Arial\"
    	labelfontsize=\"10\"
    	labelloc=t
    	labeljust=c
    	color=gray;style=filled
    	overlap=prism; overlap_scaling=0.01; ratio=0.7;
edge [penwidth=0.75,arrowsize=0.6]
edge [color=black, fontsize=8, forcelabels=true]
//-------------------------------------" > run.dot
printf "\n" >> run.dot

return
}	#end build_digraph_section()
#---------------------------------------------------------------------------------
#---------------------------------------------------------------------------------
function format_print_node() {
#This function wrote to dot file with color, title, shape the node based on its condition
name=$1
role=$2		#used if supplied to us

host_ip=`docker inspect --format '{{ .HostConfig }}' $name| ggrep -o '[0-9]\+[.][0-9]\+[.][0-9]\+[.][0-9]\+'| head -1`

pendwith=1;role=""
if  ! ( is_container_running "$name" ); then      #return=1 if running
        style="rounded,dashed"
		penwidth="1.0"
		color="red"
		label="$name\\\n $host_ip\\\n $role"
elif ! ( is_splunkd_running "$i" ); then
        style="rounded"
		penwidth="2.0"
		color="yellow"
		label="$name\\\n $host_ip\\\n $role"
elif ( compare "$name" "CM" ); then
		style="rounded,bold"
		penwidth="2.0"
		color="greenyellow"
		label="$name\\\n $host_ip\\\n Cluster Master"
elif ( compare "$name" "DEP" ); then
		style="rounded,bold"
		penwidth="2.0"
		color="greenyellow"
		#color="khaki"
		label="$name\\\n $host_ip\\\n Deployer"
elif ( compare "$name" "SH" ); then
		style="rounded,filled"
		penwidth="2.0"
		color="greenyellow"
		#color="khaki"
		label="$name\\\n $host_ip\\\n $role"
elif ( compare "$name" "IDX" ); then
		style="rounded,filled"
		penwidth="2.0"
		color="palegreen3"
		#color="khaki"
		label="$name\\\n $host_ip\\\n $role"
elif ( compare "$name" "DEMO" ); then
		style="rounded,filled"
		penwidth="2.0"
		color="hotpink"
		#color="khaki"
		label="$name\\\n $host_ip\\\n $role"
else
		style="rounded,bold"
		penwidth="2.0"
		color="green"
		label="$name\\\n $host_ip\\\n $role"
fi

line="$name [penwidth=\"$penwidth\", color=\"$color\", style=\"$style\", label=\"$label\"];"
printf "\t$line\n" >> run.dot

return
}	#end formant_print_node()
#---------------------------------------------------------------------------------
function build_generic_subgraph() {
members="$1"
#for i in `echo $1`;do      #loop thru all hosts
#	#echo "build_generic_subgraph(): Checking host[$i]...."
#	single=`echo $i|grep -v "SH"|grep -v "IDX" | grep -v "CM"`
#	#members=$members" $single"
#	members=$members" $single"
#	#members="$1"
#done
#printf "hosts[$1]\n"
#printf  "members[$members] \n"
c=`echo "$members" | awk '{print NF}' `   #current number of hosts

    #labelfontcolor=\"turquoise\";" >> run.dot
echo "//------------------------------------------
//generated by build_generic_subgraph()
subgraph cluster_0 {
label=\"Generic [$c]\";
	labelloc=t;
	labeljust=r;
	color=gray;
	style=filled;
	labelfontname=Arial;
	style=rounded;
    labelfontcolor=blue;" >> run.dot

if [ -n "$members" ]; then
	convert_to_linked_hosts "$members"		#returns $dot_linkedhosts
	#printf "DEBUG:dot_linkedhosts:$dot_linkedhosts\n"
	printf "\t$dot_linkedhosts\n" >> run.dot
fi
#note: for if-then-else  0=true   1=false, thats just how it works in bash
#--------change color based on status---------
for i in `echo $members`; do
	format_print_node "$i"
done
#--------change color based on status---------

printf "}\n" >> run.dot
printf "//-----------------------------------\n">> run.dot

return
}	#end build_generic_subgraph()
#---------------------------------------------------------------------------------
#---------------------------------------------------------------------------------
function build_shc_subgraph() {
#This function build the sch cluster section in dot file.

#dicover shc members and captian--looking for at least 1 SH (container:running splunkd:running)
shc_members="";shc_list="";captain="";dep=""
for i in `echo $1`;do      #loop thru all hosts
	if ( compare  "$i" "SH" ) && ( is_container_running "$i" ); then
		#echo "DEBUG: Evaluating host:$i";exit
   		shc_list=`docker exec -u splunk -ti $i /opt/splunk/bin/splunk show shcluster-status -auth admin:hello| grep -i label|awk '{print $3}'| sort | uniq -c `
		captain=`echo "$shc_list" | grep -v " 1 "| awk '{print $2}'| sed -e 's/^M//g' | tr -d '\r' | tr -d '\n' `
		shc_members=`echo "$shc_list" | awk '{print $2}' |sed -e 's/^M//g' | tr -d '\r' | tr '\n' ' '`
		fi

	if ( compare "$i" "DEP" ); then
		dep="$i"
	fi
done

#printf  "shc_members[$shc_members]   captain[$captain]\n"
c=`echo "$shc_members" | awk '{print NF}' `   #current number of hosts

if [ "$c" -gt "0" ]; then
echo "//---------------------------------
//generated by build_shc_subgraph()
subgraph cluster_1 {
label=\"shcluster01 [$c]\";
	labelloc=t;
	labeljust=r;
	color=gray;
	style=\"rounded,filled\";
    labelfontcolor=\"turquoise\";" >> run.dot
shc_nodes="$shc_members $dep"
if [ -n "$shc_nodes" ]; then
	convert_to_linked_hosts "$shc_nodes"		#returns $dot_linkedhosts
	printf "\t$dot_linkedhosts\n" >> run.dot
fi

#change color based on status
for i in `echo $shc_nodes`; do
	if [ "$i" == "$captain" ]; then
		role="captain"
	else
		role=""
	fi
	format_print_node "$i" "$role"
done

#printf "\t$captain [label=\"CAPTAIN\"];\n" >> run.dot
printf "}\n" >> run.dot
printf "//-------------------------\n">> run.dot

#printf "DEBUG:($n)build_shc_subgraph():OUT> dot_linkedhosts:[$dot_linkedhosts]\n"
fi
return
}	#end build_shc_subgraph()
#---------------------------------------------------------------------------------
#---------------------------------------------------------------------------------
function build_idxc_subgraph() {
#This function build the idxc cluster section in dot file.

#Use CM to dicover the IDXC MEMEBERS
idxc_members="";cm="";idx_list="";idxc_nodes=""

for i in `echo $1`;do      #loop thru all hosts
	#Look for CM in all hosts list
	if  ( compare "$i" "CM" ) && ( is_container_running "$i" ); then
		#echo "build_idxc_subgraph(): Checking host[$i]...."
		cm="$i"   #capture the name
		#---build the idxc members list ----
   		idxc_list=`docker exec -u splunk -ti $cm /opt/splunk/bin/splunk show cluster-status -auth admin:hello| grep IDX|awk '{print $1}'| sort | uniq -c `
	#	echo "idxc_list> [$idxc_list]"
		idxc_members=`echo "$idxc_list" | awk '{print $2}' |sed -e 's/^M//g' | tr -d '\r' | tr  '\n' ' ' `
		#------------------------------------
	fi
done

c=`echo "$idxc_members" | awk '{print NF}' `   #current number of hosts
if [ "$c" -gt "0" ]; then

echo "//---------------------------------
//generated by build_idxc_subgraph()
subgraph cluster_2 {
label=\"idxcluster01 [$c]\";
	labelloc=t;
	labeljust=r;
	color=lightgray;
	style=\"rounded,filled\";
    labelfontcolor=\"turquoise\";" >> run.dot

idxc_nodes="$idxc_members $cm"
convert_to_linked_hosts "$idxc_nodes"		#returns $dot_linkedhosts
#printf "DEBUG:dot_linkedhosts:[$dot_linkedhosts]"
printf "\t$dot_linkedhosts\n" >> run.dot

printf  "idxc_members[$idxc_members]  idxc_nodes[$idxc_nodes] cm[$cm]\n"

#--------change color based on status---------
for i in `echo $idxc_nodes`; do
	format_print_node "$i"
done
#--------change color based on status---------
printf "}\n" >> run.dot
printf "//-------------------------\n">> run.dot
fi
#printf "DEBUG:($n)build_idxc_subgraph():OUT> dot_linkedhosts:[$dot_linkedhosts]\n"

return
}	#end build_idxc_subgraph()
#---------------------------------------------------------------------------------
#---------------------------------------------------------------------------------
function build_cluster_connections() {

printf "\n" >> run.dot
printf "//generated by build_cluster_connections()\n" >> run.dot

#rank shc_memebers with idxc_memebers
if [ -n "$shc_members" ] && [ -n "$idxc_members" ]; then
	#printf "{rank=same $shc_members} -> {rank=same $idxc_members} [style=invis]\n" >> run.dot
	declare -a shc_array=($shc_members); declare -a idxc_array=($idxc_members)
	shc_array_len=${#shc_array[@]}; idxc_array_len=${#idxc_array[@]}
	for (( i=0; i<${shc_array_len}; i++ )); do
		printf "{rank=same ${shc_array[$i]} ${idxc_array[$i]}}\n" >> run.dot
	done
fi

#echo "shc_members[$shc_members]"
#echo "idxc_members[$idxc_members]"
#Build cross links
for i in `echo $shc_members`; do
	for j in `echo $idxc_members`; do
		#printf "$i -> $j\n"
		printf "$i -> $j [color=red;penwidth=1.0];\n" >> run.dot
	done
#printf "{rank=same $i $j}\n"
done

printf "//-------------------------\n\n">> run.dot

return
}	#build_cluster_connections()
#---------------------------------------------------------------------------------


#### MAIN #####
function main() {
hosts=`docker ps -a --format "{{.Names}}"|sort -r| tr '\n' ' '|sed 's/: /:/g'`
n=`echo "$hosts" | awk '{print NF}' `   #current number of hosts
if [ "$n" -eq "0" ]; then
	printf "($n) No hosts lists, exiting...\n"
fi
#pharse thru ALL hosts
	build_digraph_section "$n"
 	#order is important
	build_idxc_subgraph "$hosts"
	build_shc_subgraph "$hosts"
	build_generic_subgraph "$hosts"
	build_cluster_connections


#--- close every thing-------
printf "\n}\n\n" >> run.dot
#------------------------------
dot -Gnewrank -Tpng  run.dot -o run.png
}
########## END MAIN ###########3

while true; do
	#clear
	imgcat run.png
	pausing "10"
	#open run.png
	main
	trap "exit" 9 SIGINT SIGTERM SIGKILL
	#trap "error_exit '9 recieved'" SIGINT
	trap return
done

exit 0




